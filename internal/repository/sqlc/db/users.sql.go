// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, name, surname, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, name, surname, email, password
`

type CreateUserParams struct {
	Username string
	Name     string
	Surname  string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, username, name, surname, email
FROM users
WHERE email = $1
`

type SelectUserByEmailRow struct {
	ID       int32
	Username string
	Name     string
	Surname  string
	Email    string
}

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (SelectUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i SelectUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Surname,
		&i.Email,
	)
	return i, err
}

const selectUserById = `-- name: SelectUserById :one
SELECT id, username, name, surname, email
FROM users
WHERE id = $1
`

type SelectUserByIdRow struct {
	ID       int32
	Username string
	Name     string
	Surname  string
	Email    string
}

func (q *Queries) SelectUserById(ctx context.Context, id int32) (SelectUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, selectUserById, id)
	var i SelectUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Surname,
		&i.Email,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1, name = $2, surname = $3, email = $4, password = $5
WHERE id = $6
RETURNING id, username, name, surname, email, password
`

type UpdateUserParams struct {
	Username string
	Name     string
	Surname  string
	Email    string
	Password string
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Name,
		arg.Surname,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Surname,
		&i.Email,
		&i.Password,
	)
	return i, err
}
