// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,
                   name,
                   email,
                   password)
VALUES ($1,
        $2,
        $3,
        $4
       )
RETURNING
    id,
    name,
    email,
    password
`

type CreateUserParams struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

type CreateUserRow struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id,
       name,
       email,
       password
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id,
       name,
       email,
       password
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name  = $2,
    email = $3
WHERE id = $1
RETURNING
    id,
    name,
    email,
    password
`

type UpdateUserParams struct {
	ID    int32
	Name  string
	Email string
}

type UpdateUserRow struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Name, arg.Email)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
